/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  /**
   * **dishes**
   * - Table in database
   */
  export namespace dishes {
    export type Table = 'dishes';
    export interface Selectable {
      /**
      * **dishes.dish_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('dishes_dish_id_seq'::regclass)`
      */
      dish_id: number;
      /**
      * **dishes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **dishes.ingredients**
      * - `json` in database
      * - Nullable, no default
      */
      ingredients: db.JSONValue | null;
    }
    export interface JSONSelectable {
      /**
      * **dishes.dish_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('dishes_dish_id_seq'::regclass)`
      */
      dish_id: number;
      /**
      * **dishes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **dishes.ingredients**
      * - `json` in database
      * - Nullable, no default
      */
      ingredients: db.JSONValue | null;
    }
    export interface Whereable {
      /**
      * **dishes.dish_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('dishes_dish_id_seq'::regclass)`
      */
      dish_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dishes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **dishes.ingredients**
      * - `json` in database
      * - Nullable, no default
      */
      ingredients?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **dishes.dish_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('dishes_dish_id_seq'::regclass)`
      */
      dish_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **dishes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **dishes.ingredients**
      * - `json` in database
      * - Nullable, no default
      */
      ingredients?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **dishes.dish_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('dishes_dish_id_seq'::regclass)`
      */
      dish_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **dishes.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **dishes.ingredients**
      * - `json` in database
      * - Nullable, no default
      */
      ingredients?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'dishes_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = dishes.Table;
  export type Selectable = dishes.Selectable;
  export type JSONSelectable = dishes.JSONSelectable;
  export type Whereable = dishes.Whereable;
  export type Insertable = dishes.Insertable;
  export type Updatable = dishes.Updatable;
  export type UniqueIndex = dishes.UniqueIndex;
  export type Column = dishes.Column;
  export type AllBaseTables = [dishes.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [dishes.Table];


  export type SelectableForTable<T extends Table> = {
    dishes: dishes.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    dishes: dishes.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    dishes: dishes.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    dishes: dishes.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    dishes: dishes.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    dishes: dishes.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    dishes: dishes.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    dishes: dishes.SQL;
  }[T];

}
